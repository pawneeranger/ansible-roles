---

- name: 'Ensure {{ dir_traefik }} exists and contain acme.json file'
  file:
          path: '{{ dir_traefik }}/acme.json'
          state: touch
          mode: '0600'

- name: 'Ensure network {{ traefik_network }} exists'
  docker_network:
          name: '{{ traefik_network }}'

- name: Ensure traefik container is running
  docker_container:
          name: 'traefik'
          image: '{{ traefik_image }}'
          state: started
          restart_policy: unless-stopped
          volumes:
                  - '{{ traefik_dir }}:/etc/traefik/'
                  - '/var/run/docker.sock:/var/run/docker.sock:ro'
          ports:
                  - '80:80'
                  - '443:443'
          purge_networks: 'yes'
          networks:
                  - name: '{{ traefik_network }}'
          command:
                  - '--entrypoints.web.address=:80'
                  - '--entrypoints.websecure.address=:443'
                  - '--providers.docker=true'
                  - '--providers.docker.exposedbydefault=false'
                  - '--providers.docker.network={{ traefik_network }}'
                  - '--certificatesresolvers.leresolver:true'
                  - '--certificatesresolvers.leresolver.acme.email={{ acme_email }}'
                  - '--certificatesresolvers.leresolver.acme.caserver="https://acme-staging-v02.api.letsencrypt.org/directory"'
                  ## For production, change previous line to:
                  #- '--certificatesresolvers.leresolver.acme.caserver="https://acme-v02.api.letsencrypt.org/directory"'
                  - '--certificatesresolvers.leresolver.acme.storage="etc/traefik/acme.json"'
                  - '--certificatesresolvers.leresolver.acme.dnschallenge=true'
                  - '--certificatesresolvers.leresolver.acme.dnschallenge.delaybeforecheck=10'
                  - '--certificatesresolvers.leresolver.acme.dnschallenge.provider={{ traefik_dns_provider }}'
                  ## This allows to have detailed logs for debugging purposes
                  #- '--log.level=DEBUG'
                  ## Dashboard
                  #- '--api=true'
          labels:
                  traefik.enable: "true"
                  # global redirect to https
                  traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: "https"
                  traefik.http.routers.http-catchall.rule: "hostregexp(`{host:.+}`)"
                  traefik.http.routers.http-catchall.entrypoints: "web"
                  traefik.http.routers.http-catchall.middlewares: "redirect-to-https@docker"
                  ## dashboard (you may want to add authentication layer for use in production)
                  #traefik.http.routers.api.entryPoints: "websecure"
                  #traefik.http.routers.api.rule: "Host(`{{ traefik_domain }}`)"
                  #traefik.http.routers.api.service: "api@internal"
                  #traefik.http.routers.api.tls: 'true'
                  #traefik.http.routers.api.tls.certresolver: 'leresolver'
                  ## wildcard certificate
                  #traefik.http.routers.api.tls.domains[0].main: '{{ my_domain }}'
                  #traefik.http.routers.api.tls.domains[0].sans: '*.{{ my_domain }}'
          env:
          # Change these values to your DNS provider (check list at https://docs.traefik.io/v2.0/https/acme/#providers)
          # Cloudflare dns
                  CF_API_EMAIL: '{{ cf_api_email }}'
                  CF_API_KEY: '{{ cf_api_key }}'
